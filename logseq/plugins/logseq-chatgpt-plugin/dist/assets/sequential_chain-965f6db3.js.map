{"version":3,"file":"sequential_chain-965f6db3.js","sources":["../../node_modules/langchain/dist/util/set.js","../../node_modules/langchain/dist/chains/sequential_chain.js"],"sourcesContent":["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nexport function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nexport function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nexport function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n","import { BaseChain } from \"./base.js\";\nimport { intersection, union, difference } from \"../util/set.js\";\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n */\nexport class SequentialChain extends BaseChain {\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = intersection(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = union(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            const missingKeys = difference(new Set(chain.inputKeys), availableKeys);\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = intersection(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = difference(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = difference(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport class SimpleSequentialChain extends BaseChain {\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n"],"names":["intersection","setA","setB","_intersection","elem","union","_union","difference","_difference","formatSet","input","i","SequentialChain","BaseChain","fields","memoryKeys","_a","inputKeysSet","memoryKeysSet","keysIntersection","availableKeys","chain","missingKeys","outputKeysSet","overlappingOutputKeys","outputKey","outputKeys","values","runManager","allChainValues","key","output","data","chains","inputVariables","outputVariables","serializedChains","serializedChain","deserializedChain","SimpleSequentialChain","k"],"mappings":"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","x_google_ignoreList":[0,1]}